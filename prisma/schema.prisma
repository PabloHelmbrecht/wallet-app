// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  group         Group?        @relation(fields: [groupId], references: [id])
  groupId       String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id                 String            @id @default(cuid())
  amount             Float             @default(0)
  description        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  category           Category          @relation(fields: [categoryId], references: [id])
  categoryId         String
  bookingDate        DateTime?
  paymentDate        DateTime?
  financialAccount   FinancialAccount  @relation(name: "mainAccount", fields: [financialAccountId], references: [id])
  financialAccountId String
  transferAccount    FinancialAccount? @relation(name: "transferAccount", fields: [transferAccountId], references: [id])
  transferAccountId  String?
  currency           Currency
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  group              Group             @relation(fields: [groupId], references: [id])
  groupId            String
  beneficiary        Beneficiary?      @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId      String?
  budget             Budget?           @relation(fields: [budgetId], references: [id])
  budgetId           String?
  source             Source?           @relation(fields: [sourceId], references: [id])
  sourceId           String?
  exchangeRate       Float             @default(1)
  tags               Tag[]
}

model Tag {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  group        Group         @relation(fields: [groupId], references: [id])
  groupId      String
  transactions Transaction[]
}

model Category {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  group        Group         @relation(fields: [groupId], references: [id])
  groupId      String
  transactions Transaction[]
}

model FinancialAccount {
  id                   String        @id @default(cuid())
  name                 String
  image                String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now()) @updatedAt
  group                Group         @relation(fields: [groupId], references: [id])
  groupId              String
  transactions         Transaction[] @relation(name: "mainAccount")
  transferTransactions Transaction[] @relation(name: "transferAccount")
}

model Group {
  id                String             @id @default(cuid())
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  transactions      Transaction[]
  tags              Tag[]
  categories        Category[]
  financialAccounts FinancialAccount[]
  beneficiaries     Beneficiary[]
  budgets           Budget[]
  sources           Source[]
  users             User[]
}

model Beneficiary {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  group        Group         @relation(fields: [groupId], references: [id])
  groupId      String
  transactions Transaction[]
}

model Budget {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  group        Group         @relation(fields: [groupId], references: [id])
  groupId      String
  transactions Transaction[]
}

model Source {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  group        Group         @relation(fields: [groupId], references: [id])
  groupId      String
  transactions Transaction[]
}

enum Currency {
  ARS
  AUD
  BOB
  BRL
  CAD
  CLP
  COP
  EUR
  GBP
  GTQ
  HKD
  HNL
  ILS
  INR
  JPY
  KRW
  MXN
  PAB
  PEN
  PLN
  PYG
  SVC
  USD
  UYU
}
